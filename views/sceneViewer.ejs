<!DOCTYPE html>
<html>
<head>
    <title>Molecule Viewer</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.3/css/dataTables.bootstrap5.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>

    <script src = "https://cdn.datatables.net/1.13.3/js/jquery.dataTables.min.js"></script>
    <script src = "https://cdn.datatables.net/1.13.3/js/dataTables.bootstrap5.min.js"></script>



    <script type="importmap">
        {
            "imports": {
                "three": "../js/three.module.js",
                "OrbitControls": "../js/OrbitControls.js",
                "VRMLLoader": "../js/VRMLLoader.js"
            }
        }
    </script>

    <style>
        body { 
            background-color : #202020;
            margin: 0; 
        }
        #three-area{
            height: 100vh;
            width: 100%;
        }
        #gui-area{
            position: absolute;
            top: 0;
            left: 0;
            max-width: 500px;
            z-index: 1000 !important;
        }
        .gui-width{
            max-width: 500px;
        }
        #body-container{
            position: relative;
        }
        .bg-black{
            background-color: #1f2326 !important;
        }
        .transparent-blur{
            background-color: rgba(31, 35, 38, 0.7);
        }
        .blur-10{
            backdrop-filter: blur(10px);
        }
    </style> 
</head>
<body>
    <div id = "body-container">
        <div id ="three-area"></div>
        <div id="gui-area">
            <div class="gui-width">
                <div class = "container">
                    <div class = "row mt-3">
                        <div class = "col">
                            <button type="button" id = "main-menu-button" class="btn btn-outline-light" data-bs-toggle="offcanvas" data-bs-target="#mainMenu" aria-controls="mainMenu">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-menu-app-fill" viewBox="0 0 16 16">
                                    <path d="M0 1.5A1.5 1.5 0 0 1 1.5 0h2A1.5 1.5 0 0 1 5 1.5v2A1.5 1.5 0 0 1 3.5 5h-2A1.5 1.5 0 0 1 0 3.5v-2zM0 8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8zm1 3v2a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2H1zm14-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2h14zM2 8.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"/>
                                </svg>
                                Menu
                            </button>
                        </div>
                    </div>
                </div>  
            </div> 
        </div>
    </div>
    <script type= "module">
        import { OrbitControls } from '/js/OrbitControls.js';
        import { VRMLLoader } from '/js/VRMLLoader.js';
        import { GLTFLoader } from '/js/GLTFLoader.js';

        import * as THREE from '/js/three.module.js';
        import { ARButton } from '/js/ARButton.js';

        let requestedFile = window.location.pathname.substring(window.location.pathname.lastIndexOf('/') + 1);
        let requestedFileExt = requestedFile.substring(requestedFile.lastIndexOf('.') + 1);

        let loader;
        if(requestedFileExt == "wrl"){
            loader = new VRMLLoader();
        }else if(requestedFileExt == "gltf"){
            loader = new GLTFLoader();
        }

        const threeArea = document.getElementById('three-area');

        let scene, camera, renderer, controls, clock;
        let mixer;

        let axesHelper;
        let spotLightTop, spotLightBottom, ambientLight;

        clock = new THREE.Clock();
        let deltaTime = 0;
        let totalTime = 0;
        let actions = [];


        function init(){

            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 4000 );

            renderer = new THREE.WebGLRenderer({ alpha: true });
            renderer.setClearColor( 0x000000, 0 );
            renderer.setSize( window.innerWidth, window.innerHeight );
            threeArea.appendChild( renderer.domElement );

            const activateAR = document.body.appendChild( ARButton.createButton( renderer ) );
                renderer.xr.enabled = true;
                renderer.setAnimationLoop( function () {
                    renderer.render( scene, camera );
                } );

            
            spotLightTop = new THREE.SpotLight( 0xffffff );
            spotLightTop.position.set( 0, 0, 1000 );
            scene.add( spotLightTop );

            ambientLight = new THREE.AmbientLight( 0xffffff );
            scene.add( ambientLight );


            loader.load( '../scenefiles/' + requestedFile, function ( object ) {
                if(requestedFileExt == "wrl"){
                    scene.add( object );
                }
                else if(requestedFileExt == "gltf"){
                    console.log(object);
                    mixer = new THREE.AnimationMixer( object.scene );
                    for(let animation of object.animations){
                        actions.push(mixer.clipAction(animation));
                        var action = mixer.clipAction( animation);
                        action.play();

                    }
                    scene.add( object.scene );
                }
            } );


            axesHelper = new THREE.AxesHelper( 50 );
            scene.add( axesHelper );

            controls = new OrbitControls( camera, renderer.domElement );
            controls.dampingFactor = 10;
            controls.minDistance = 35;

            camera.position.x = 0;
            camera.position.y = 0;
            camera.position.z = 100;

        }
        

        function animate() {
            requestAnimationFrame( animate );
            var delta = clock.getDelta();
            if ( mixer ) mixer.update( delta );

            renderer.render( scene, camera );
            controls.update();
        }

        window.addEventListener('resize', onResize, false);

        function onResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }


        init();
        animate();
    </script>
   
</body>
</html>